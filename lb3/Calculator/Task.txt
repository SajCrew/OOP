Задание 2 – Калькулятор – 300 баллов
Разработать с использованием подхода TDD программу «Калькулятор», позволяющую выполнять простейшие арифметические операции над переменными и пользовательскими функциями.
Спроектируйте классы, моделирующие основные сущности предметной области, и напишите для них тесты.

Нарисуйте диаграмму классов получившейся программы (можно использовать программу draw.io, mermaid или аналоги, а также нарисовать на бумаге).

Входные данные поступают из stdin. Работа программы завершается при обнаружении конца файла. Каждая строка содержит одну из следующих команд:

var <идентификатор>

Объявляет переменную типа double с именем <идентификатор>. Идентификатор не должен совпадать ни с одним из ранее объявленных имен переменных и функций. Значение переменной после ее объявления не определено (использовать значение nan для этих целей)

let <идентификатор1> = <число с плавающей запятой> либо

let <идентификатор1> = <идентификатор2>.

Присваивает переменной с именем <идентификатор1> числовое значение, либо текущее значение ранее объявленного идентификатора с именем <идентификатор2>. Если переменная с именем <идентификатор1> не была ранее объявлена, происходит объявление новой переменной. В качестве <идентификатора1> не может выступать имя функции.

fn <идентификатор1> = <идентификатор2> либо

fn <идентификатор1> = <идентификатор2><операция><идентификатор3>

Объявляет новую функцию с ранее необъявленным именем <идентификатор1>, значением которой будет либо значение идентификатора <идентификатор2>, либо результат применения одной из следующих бинарных операций к значениям ранее объявленных идентификаторов <идентификатор2> и <идентификатор3> в момент вычисления значения функции:

+. Сложение.
-. Вычитание.
*. Умножение
/. Деление
Если значение хотя бы одного из операндов операции не определено, результатом операции должно быть неопределенное значение.

print <идентификатор>

Выводит в stdout значение ранее объявленного идентификатора. Если идентификатором являлась переменная, то выводится ее значение, а если функция, то выводится вычисленное значение функции. Если при вычислении функции произошло деление на ноль, её значение считается неопределенным (nan), а сообщение об ошибке не выводится.
Значение идентификатора выводится с точностью в 2 знака после запятой. В случае, когда значение идентификатора не определено, должно быть выведено nan.

printvars

Выводит в stdout имена и значения всех ранее объявленных переменных, отсортированных по алфавиту, по одному в каждой строке в следующем формате:

<идентификатор>:<значение> – без каких-либо пробелов и табуляций

Значение переменной выводится с точностью 2 знака после запятой. Если значение переменной не определено, должно быть выведено nan. Если ни одной переменной не было объявлено к моменту выполнения команды printvars, в stdout выводиться ничего не должно.

printfns

Выводит в stdout имена и значения всех ранее объявленных функций, отсортированных по алфавиту, по одному в каждой строке в следующем формате:

<идентификатор>:<значение> – без каких-либо пробелов и табуляций

Значение функции выводится с точностью в 2 знака после запятой. Если значение функции не определено, должно быть выведено nan. Если при вычислении функции произошло деление на ноль, её значение считается неопределенным (nan), а сообщение об ошибке не выводится.
Если ни одной функции не было объявлено к моменту выполнения команды printfns, в stdout выводиться ничего не должно

Идентификатором является непустая строка, в которой допускается использовать буквы английского алфавита, цифры и символ подчеркивания. Идентификатор не может начинаться с цифры. Идентификаторы используются в качестве имен переменных и функций.

Программа должна корректно распознавать операнды как в слитном виде (например, fn XPlusY=x+y),
так и через пробел (fn XPlusY = x + y). Оба варианта записи должны приводить к одинаковым результатам,
и программа должна корректно интерпретировать их при объявлении переменных и функций.

Сообщения об ошибках
В случае ошибки команда игнорируется, а в стандартный поток stdout выводятся следующие сообщения:

Если введена неизвестная команда: "Unknown command"
Если синтаксис введенной команды не удовлетворяет правилам (в том числе недопустимый идентификатор): "Invalid usage"
Если переменная с таким именем уже была объявлена: "Name already exists"
Если в команде используется необъявленная переменная: “Name does not exist”
Тестирование программы в системе Яндекс.Contest
Тестирование в Яндекс.Contest настроено только для программ, написанных на языке C++ стандарта C++20.